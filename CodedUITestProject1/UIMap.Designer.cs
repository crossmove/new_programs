// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Click on Start Menu
        /// </summary>
        public void StartMenu()
        {
            #region Variable Declarations
            WinButton uIStartButton = this.UIStartWindow.UIStartButton;
            #endregion

            // Click 'Start' button
            Mouse.Click(uIStartButton, new Point(28, 26));
        }
        
        /// <summary>
        /// abcd - Use 'abcdExpectedValues' to pass parameters into this method.
        /// </summary>
        public void abcd()
        {
            #region Variable Declarations
            WinListItem uITekSystemsListItem = this.UIProgramManagerWindow.UIDesktopList.UITekSystemsListItem;
            #endregion

            // Verify that the 'Name' property of 'TekSystems' list item equals 'TekSystems'
            Assert.AreEqual(this.abcdExpectedValues.UITekSystemsListItemName, uITekSystemsListItem.Name);
        }
        
        /// <summary>
        /// Sdedes - Use 'SdedesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Sdedes()
        {
            #region Variable Declarations
            WinListItem uIShortcutsListItem = this.UIProgramManagerWindow.UIDesktopList.UIShortcutsListItem;
            #endregion

            // Verify that the 'Name' property of 'shortcuts' list item equals 'shortcuts'
            Assert.AreEqual(this.SdedesExpectedValues.UIShortcutsListItemName, uIShortcutsListItem.Name);
        }
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton uIStartButton = this.UIStartWindow.UIStartButton;
            #endregion

            // Click 'Start' button
            Mouse.Click(uIStartButton, new Point(34, 35));
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinButton uIItem1Button = this.UICalculatorWindow.UIItemWindow.UIItem1Button;
            WinButton uIAddButton = this.UICalculatorWindow.UIItemWindow1.UIAddButton;
            WinButton uIItem2Button = this.UICalculatorWindow.UIItemWindow2.UIItem2Button;
            WinButton uIEqualsButton = this.UICalculatorWindow.UIItemWindow3.UIEqualsButton;
            #endregion

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(13, 12));

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(16, 16));

            // Click '2' button
            Mouse.Click(uIItem2Button, new Point(16, 12));

            // Click 'Equals' button
            Mouse.Click(uIEqualsButton, new Point(12, 25));
        }
        
        /// <summary>
        /// RecordedMethod3
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinButton uIItem1Button = this.UICalculatorWindow.UIItemWindow.UIItem1Button;
            WinButton uIAddButton = this.UICalculatorWindow.UIItemWindow1.UIAddButton;
            WinButton uIItem6Button = this.UICalculatorWindow.UIItemWindow21.UIItem6Button;
            WinButton uIEqualsButton = this.UICalculatorWindow.UIItemWindow3.UIEqualsButton;
            #endregion

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(21, 12));

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(16, 11));

            // Click '6' button
            Mouse.Click(uIItem6Button, new Point(9, 5));

            // Click 'Equals' button
            Mouse.Click(uIEqualsButton, new Point(17, 24));
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinToolBar uIRunningapplicationsToolBar = this.UIRunningapplicationsWindow.UIRunningapplicationsClient.UIRunningapplicationsToolBar;
            #endregion

            // Click 'Running applications' tool bar
            Mouse.Click(uIRunningapplicationsToolBar, new Point(931, 21));

            // Click 'Running applications' tool bar
            Mouse.Click(uIRunningapplicationsToolBar, new Point(1032, 26));
        }
        
        #region Properties
        public virtual abcdExpectedValues abcdExpectedValues
        {
            get
            {
                if ((this.mabcdExpectedValues == null))
                {
                    this.mabcdExpectedValues = new abcdExpectedValues();
                }
                return this.mabcdExpectedValues;
            }
        }
        
        public virtual SdedesExpectedValues SdedesExpectedValues
        {
            get
            {
                if ((this.mSdedesExpectedValues == null))
                {
                    this.mSdedesExpectedValues = new SdedesExpectedValues();
                }
                return this.mSdedesExpectedValues;
            }
        }
        
        public UIStartWindow UIStartWindow
        {
            get
            {
                if ((this.mUIStartWindow == null))
                {
                    this.mUIStartWindow = new UIStartWindow();
                }
                return this.mUIStartWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UICalculatorWindow UICalculatorWindow
        {
            get
            {
                if ((this.mUICalculatorWindow == null))
                {
                    this.mUICalculatorWindow = new UICalculatorWindow();
                }
                return this.mUICalculatorWindow;
            }
        }
        
        public UIRunningapplicationsWindow UIRunningapplicationsWindow
        {
            get
            {
                if ((this.mUIRunningapplicationsWindow == null))
                {
                    this.mUIRunningapplicationsWindow = new UIRunningapplicationsWindow();
                }
                return this.mUIRunningapplicationsWindow;
            }
        }
        #endregion
        
        #region Fields
        private abcdExpectedValues mabcdExpectedValues;
        
        private SdedesExpectedValues mSdedesExpectedValues;
        
        private UIStartWindow mUIStartWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UICalculatorWindow mUICalculatorWindow;
        
        private UIRunningapplicationsWindow mUIRunningapplicationsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'abcd'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class abcdExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'TekSystems' list item equals 'TekSystems'
        /// </summary>
        public string UITekSystemsListItemName = "TekSystems";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Sdedes'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class SdedesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'shortcuts' list item equals 'shortcuts'
        /// </summary>
        public string UIShortcutsListItemName = "shortcuts";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIStartWindow : WinWindow
    {
        
        public UIStartWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Start";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("Start");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartButton
        {
            get
            {
                if ((this.mUIStartButton == null))
                {
                    this.mUIStartButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStartButton.SearchProperties[WinButton.PropertyNames.Name] = "Start";
                    this.mUIStartButton.WindowTitles.Add("Start");
                    #endregion
                }
                return this.mUIStartButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UITekSystemsListItem
        {
            get
            {
                if ((this.mUITekSystemsListItem == null))
                {
                    this.mUITekSystemsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUITekSystemsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "TekSystems";
                    this.mUITekSystemsListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUITekSystemsListItem;
            }
        }
        
        public WinListItem UIInterviewListItem
        {
            get
            {
                if ((this.mUIInterviewListItem == null))
                {
                    this.mUIInterviewListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIInterviewListItem.SearchProperties[WinListItem.PropertyNames.Name] = "interview";
                    this.mUIInterviewListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIInterviewListItem;
            }
        }
        
        public WinListItem UIShortcutsListItem
        {
            get
            {
                if ((this.mUIShortcutsListItem == null))
                {
                    this.mUIShortcutsListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIShortcutsListItem.SearchProperties[WinListItem.PropertyNames.Name] = "shortcuts";
                    this.mUIShortcutsListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIShortcutsListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUITekSystemsListItem;
        
        private WinListItem mUIInterviewListItem;
        
        private WinListItem mUIShortcutsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICalculatorWindow : WinWindow
    {
        
        public UICalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CalcFrame";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow21 UIItemWindow21
        {
            get
            {
                if ((this.mUIItemWindow21 == null))
                {
                    this.mUIItemWindow21 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow21;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow21 mUIItemWindow21;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "131";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem1Button
        {
            get
            {
                if ((this.mUIItem1Button == null))
                {
                    this.mUIItem1Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem1Button.SearchProperties[WinButton.PropertyNames.Name] = "1";
                    this.mUIItem1Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem1Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem1Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "93";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "132";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem2Button
        {
            get
            {
                if ((this.mUIItem2Button == null))
                {
                    this.mUIItem2Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem2Button.SearchProperties[WinButton.PropertyNames.Name] = "2";
                    this.mUIItem2Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem2Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem2Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "121";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIEqualsButton
        {
            get
            {
                if ((this.mUIEqualsButton == null))
                {
                    this.mUIEqualsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEqualsButton.SearchProperties[WinButton.PropertyNames.Name] = "Equals";
                    this.mUIEqualsButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIEqualsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEqualsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "136";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem6Button
        {
            get
            {
                if ((this.mUIItem6Button == null))
                {
                    this.mUIItem6Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem6Button.SearchProperties[WinButton.PropertyNames.Name] = "6";
                    this.mUIItem6Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem6Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem6Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRunningapplicationsWindow : WinWindow
    {
        
        public UIRunningapplicationsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Running applications";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MSTaskSwWClass";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public UIRunningapplicationsClient UIRunningapplicationsClient
        {
            get
            {
                if ((this.mUIRunningapplicationsClient == null))
                {
                    this.mUIRunningapplicationsClient = new UIRunningapplicationsClient(this);
                }
                return this.mUIRunningapplicationsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIRunningapplicationsClient mUIRunningapplicationsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIRunningapplicationsClient : WinClient
    {
        
        public UIRunningapplicationsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Running applications";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public WinToolBar UIRunningapplicationsToolBar
        {
            get
            {
                if ((this.mUIRunningapplicationsToolBar == null))
                {
                    this.mUIRunningapplicationsToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRunningapplicationsToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Running applications";
                    this.mUIRunningapplicationsToolBar.WindowTitles.Add("Running applications");
                    #endregion
                }
                return this.mUIRunningapplicationsToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIRunningapplicationsToolBar;
        #endregion
    }
}
